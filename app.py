from openai import OpenAI
import streamlit as st
from dotenv import load_dotenv
import os, shelve, random

load_dotenv()

st.title("Mestre Supremo das Ideias de Startup")

AVATAR_USUARIO = ["ğŸ™‚","ğŸ™‚","ğŸ™‚","ğŸ™‚","ğŸ™‚","ğŸ™‚","ğŸ™‚","ğŸ™‚", "ğŸ˜²", "ğŸ¤”", "ğŸ«£", "ğŸ¤—", "ğŸ˜–", "ğŸ˜Œ", "ğŸ¤«"]
AVATAR_BOT = "ğŸ¥¸"

# guarda o estado dos emojis
state_dir = './state/'
if not os.path.exists(state_dir):
    os.makedirs(state_dir)

emoji_mapping_file = os.path.join(state_dir, 'emoji_mapping.txt')
if not os.path.exists(emoji_mapping_file):
    with open(emoji_mapping_file, 'w') as f:
        f.write("0\n")

client = OpenAI()

model = "gpt-3.5-turbo-16k"
assistant_instructions = """
    VocÃª Ã© um assistente criativo especialista em ter ideias de startups inovadoras.
    VocÃª responde de forma sucinta e engraÃ§ada, sempre tentando dar ideias mirabolantes e fora do senso comum para a criaÃ§Ã£o de uma startup.
    Comece fazendo perguntas ao usuÃ¡rio: qual a temÃ¡tica da startup? Em seguida pergunte em qual segmento a startup irÃ¡ atuar,
    qual a escala de impacto do projeto (pessoal, cidade, paÃ­s, global), qual emoÃ§Ã£o a startup deve provocar nas pessoas, e finalmente,
    qual o orÃ§amento para botar a ideia de pÃ©?
    Continue fazendo perguntas ao usuÃ¡rio atÃ© ele responder pelo menos essas caracterÃ­sticas citadas da startup.e
    A cada resposta do usuÃ¡rio, o elogie com EXTREMO entusiasmo, como se ele fosse um gÃªnio.
    Depois de coletar essas informaÃ§Ãµes do usuÃ¡rio, prossiga em dar uma ideia criativa de startup. Tente envolver alta tecnologia em qualquer soluÃ§Ã£o que dÃª. 
    Responda com frases curtas e com excelente formataÃ§Ã£o de texto de fÃ¡cil leitura. Use negrito, itÃ¡lico ou emojis para enfatizar certos pontos.
"""

# ----------------------- Inicializando o chat
if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = model

def loadChatHistory():
    with shelve.open("chat_history") as db:
        return db.get("messages", [])

def saveChatHistory(messages):
    with shelve.open("chat_history") as db:
        db["messages"] = messages

def defaultMessage():
    st.session_state.messages.append({
        "role": "assistant",
        "content": "Qual a temÃ¡tica da sua startup? Me fale mais sobre ela."
    })

if "messages" not in st.session_state:
    st.session_state.messages = loadChatHistory()

# mensagem padrÃ£o, se chat estÃ¡ vazio
if not st.session_state.messages:
    defaultMessage()

# ----------------------- Interface
    
def randNum():
    """
        Retorna um nÃºmero aleatÃ³rio para escolher um emoji para o usuÃ¡rio.
    """
    
    return random.randint(0, len(AVATAR_USUARIO) - 1)

def loadEmojiMapping():
    try:
        with open('./state/emoji_mapping.txt', 'r') as file:
            mapping = [int(line.strip()) for line in file.readlines()]
    except FileNotFoundError:
        mapping = []
    return mapping

def appendToEmojiMapping(num):
    with open('./state/emoji_mapping.txt', 'a') as file:
        file.write(f"{num}\n")
        file.write(f"0\n")

emoji_mapping = loadEmojiMapping()
print(emoji_mapping)

def assignEmojiForNewMessage():
    new_emoji_index = randNum()
    emoji_mapping.append(new_emoji_index)
    appendToEmojiMapping(new_emoji_index)
    return new_emoji_index

with st.sidebar:
    if st.button("Deletar Conversa"):
        st.session_state.messages = []        
        
        # Limpa chat
        saveChatHistory([])

        # Insere mensagem padrÃ£o
        defaultMessage()

        # Reseta os emojis
        emoji_mapping = []
        with open(emoji_mapping_file, 'w') as f:
            f.write("0\n")

# Renderizando as mensagens do chat
for idx, message in enumerate(st.session_state.messages):
    print(f"idx: {idx}")
    print(f"message: {message['role']}\n")
    if message['role'] == 'user':
        avatar = AVATAR_USUARIO[emoji_mapping[idx]]
    else:
        avatar = AVATAR_BOT
    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])


# Interface principal do chat | streaming de mensagens
if prompt := st.chat_input("Como posso ajudÃ¡-lo?"):
    assignEmojiForNewMessage()
    st.session_state.messages.append({
        "role": "user",
        "content": prompt
    })
    saveChatHistory(st.session_state.messages)
    
    # lÃ³gica de streaming
    with st.chat_message("assistant", avatar=AVATAR_BOT):
        message_placeholder = st.empty()
        full_response = ""
        for response in client.chat.completions.create(
            model=st.session_state["openai_model"],
            messages=[{"role": "system", "content": assistant_instructions}] + st.session_state["messages"],
            stream=True,
        ):
            full_response += response.choices[0].delta.content or ""
            message_placeholder.markdown(full_response + "|")
        message_placeholder.markdown(full_response)
    st.session_state.messages.append({"role": "assistant", "content": full_response})
    saveChatHistory(st.session_state.messages)

    # forÃ§a um update da interface, pra mostrar a mensagem do usuÃ¡rio
    st.experimental_rerun()