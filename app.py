from openai import OpenAI
import streamlit as st
from dotenv import load_dotenv
import os
import shelve

load_dotenv()

st.title("Mestre Supremo das Ideias de Startup")

AVATAR_USUARIO = "üôÇ"
AVATAR_BOT = "ü•∏"
client = OpenAI()

model = "gpt-3.5-turbo-16k"
assistant_instructions = """
    Voc√™ √© um assistente criativo especialista em ter ideias de startups inovadoras.
    Voc√™ responde de forma sucinta e engra√ßada, sempre tentando dar ideias mirabolantes e fora do senso comum para a cria√ß√£o de uma startup.
    Comece fazendo perguntas ao usu√°rio: qual a tem√°tica da startup? Em seguida pergunte em qual segmento a startup ir√° atuar,
    qual a escala de impacto do projeto (pessoal, cidade, pa√≠s, global), qual emo√ß√£o a startup deve provocar nas pessoas, e finalmente,
    qual o or√ßamento para botar a ideia de p√©?
    Continue fazendo perguntas ao usu√°rio at√© ele responder pelo menos essas caracter√≠sticas citadas da startup.e
    A cada resposta do usu√°rio, o elogie com EXTREMO entusiasmo, como se ele fosse um g√™nio.
    Depois de coletar essas informa√ß√µes do usu√°rio, prossiga em dar uma ideia criativa de startup. Tente envolver alta tecnologia em qualquer solu√ß√£o que d√™. 
    Responda com frases curtas e com excelente formata√ß√£o de texto de f√°cil leitura. Use negrito, it√°lico ou emojis para enfatizar certos pontos.
"""

# ----------------------- Inicializando o chat
if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = model

def loadChatHistory():
    with shelve.open("chat_history") as db:
        return db.get("messages", [])

def saveChatHistory(messages):
    with shelve.open("chat_history") as db:
        db["messages"] = messages

def defaultMessage():
    st.session_state.messages.append({
        "role": "assistant",
        "content": "Qual a tem√°tica da sua startup? Me fale mais sobre ela."
    })

if "messages" not in st.session_state:
    st.session_state.messages = loadChatHistory()

# mensagem padr√£o, se chat est√° vazio
if not st.session_state.messages:
    defaultMessage()

# ----------------------- Interface
with st.sidebar:
    if st.button("Deletar Conversa"):
        st.session_state.messages = []        
        
        # Limpa chat
        saveChatHistory([])

        # Insere mensagem padr√£o
        defaultMessage()

# Renderizando as mensagens do chat
for message in st.session_state.messages:
    avatar = AVATAR_USUARIO if message["role"] == "user" else AVATAR_BOT
    with st.chat_message(message["role"], avatar=avatar):
        st.markdown(message["content"])

# Interface principal do chat | streaming de mensagens
if prompt := st.chat_input("Como posso ajud√°-lo?"):
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user", avatar=AVATAR_USUARIO):
        st.markdown(prompt)

    # Integrating assistant's instructions with the ChatGPT API call
    with st.chat_message("assistant", avatar=AVATAR_BOT):
        message_placeholder = st.empty()
        full_response = ""
        for response in client.chat.completions.create(
            model=st.session_state["openai_model"],
            messages=[{"role": "system", "content": assistant_instructions}] + st.session_state["messages"],
            stream=True,
        ):
            full_response += response.choices[0].delta.content or ""
            message_placeholder.markdown(full_response + "|")
        message_placeholder.markdown(full_response)
    st.session_state.messages.append({"role": "assistant", "content": full_response})

# Save chat history after each interaction
saveChatHistory(st.session_state.messages)
